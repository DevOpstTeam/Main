name: cicd

on:
  push:
    branches:
      - main
      - develop
    tags: [ 'v*.*.*' ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - 
      uses: actions/checkout@v3
    - 
      name: Set up Python 3.11.4
      uses: actions/setup-python@v3
      with:
        python-version: "3.11.4"
    # add the IP address
    - 
      name: Add IP address to trusted source (managed database)
      uses: GarreauArthur/manage-digital-ocean-managed-database-trusted-sources-gh-action@main
      with:
        action: "add"
        database_id: ${{ secrets.DATABASE_ID }}
        digitalocean_token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    - 
      name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - 
      name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - 
      name: Test with pytest
      env:
        MYSQL_HOST: ${{secrets.MYSQL_HOST}}
        MYSQL_USER: ${{secrets.MYSQL_USER}}
        MYSQL_PASSWORD: ${{secrets.MYSQL_PASSWORD}}
        MYSQL_PORT: ${{secrets.MYSQL_PORT}}
        MYSQL_DB: ${{secrets.MYSQL_DB}}
      run: |
        pytest test_server.py --cov
    - 
      name: Remove IP address to trusted source (managed database)
      uses: GarreauArthur/manage-digital-ocean-managed-database-trusted-sources-gh-action@main
      with:
        action: "remove"
        database_id: ${{ secrets.DATABASE_ID }}
        digitalocean_token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
  
  build:
    runs-on: ubuntu-latest
    needs: test
    steps: 
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Login to Docker HubS
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: latest release
        run: |
          set -x
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | grep "tag_name" | cut -d '"' -f 4)
          echo "LATEST_RELEASE=$LATEST_RELEASE" >> $GITHUB_ENV
      
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/devops:${{ env.LATEST_RELEASE }}


  push:
    runs-on: ubuntu-latest
    needs: build
    steps:
      -
        name: Checkout files
        uses: actions/checkout@v2

      - name: latest release
        run: |
          set -x
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | grep "tag_name" | cut -d '"' -f 4)
          echo "LATEST_RELEASE=$LATEST_RELEASE" >> $GITHUB_ENV
      -
        name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      -
        name: Login to DigitalOcean Container Registry
        run: doctl registry login
      -
        name: Pull Docker image from Docker Hub
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/devops:${{ env.LATEST_RELEASE }}
      -
        name: Docker tag
        run: docker tag ${{ secrets.DOCKER_USERNAME }}/devops:${{ env.LATEST_RELEASE }} registry.digitalocean.com/project-devops/mathijs2002/devops:${{ env.LATEST_RELEASE }}
      -
        name: Push Docker image to DigitalOcean
        run: docker push registry.digitalocean.com/project-devops/mathijs2002/devops:${{ env.LATEST_RELEASE }} 
      - 
        name: DigitalOcean Container Registry Remove
        uses: ripplr-io/docr-image-remove@v1
        with:
          image_repository: mathijs2002/devops # required
          buffer_size: 3

    


  deploy:
    runs-on: ubuntu-latest
    needs: push
    steps:
      -
        name: Checkout files
        uses: actions/checkout@v2
      - 
        name: latest release
        run: |
          set -x
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | grep "tag_name" | cut -d '"' -f 4)
          echo "LATEST_RELEASE=$LATEST_RELEASE" >> $GITHUB_ENV
      -
        name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      -
        name: Login to DigitalOcean Container Registry
        run: doctl registry login
      - 
        name: Save DigitalOcean kubeconfig with short-lived credentials
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 python-api
      - 
        name: Update deployment file
        run: |
            sed -i 's|placeholder_image|registry.digitalocean.com/project-devops/mathijs2002/devops/${{ env.LATEST_RELEASE }}|' $GITHUB_WORKSPACE/.config/deployment.yaml
      - 
        name: Update deployment file
        run: |
          sed -i 's|placeholder_host|${{ secrets.HOST_DB }}|' $GITHUB_WORKSPACE/.config/deployment.yaml
      - 
        name: Update deployment file
        run: |
          sed -i 's|placeholder_passwd|${{ secrets.DB_PASSWORD }}|' $GITHUB_WORKSPACE/.config/deployment.yaml
      -
        name: restart deployment file
        run: kubectl rollout restart -n default deployment python-deploy
      -
        name: Verify deployment
        run: kubectl rollout status deployment/python-deploy 
      -
        name: Deploy load balancer
        run: kubectl apply -f ${GITHUB_WORKSPACE}/.config/loadbalanc.yaml
      
        

    


      
    
        



    


     

    

    

          
